<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AREA_ADMINISTRATION" xml:space="preserve">
    <value>Administration</value>
    <comment>Area name</comment>
  </data>
  <data name="AREA_BUDGET" xml:space="preserve">
    <value>Budget</value>
    <comment>Area name</comment>
  </data>
  <data name="AREA_REPORTING" xml:space="preserve">
    <value>Reporting</value>
    <comment>Area name</comment>
  </data>
  <data name="AREA_SPENDING" xml:space="preserve">
    <value>Spending</value>
    <comment>Area name</comment>
  </data>
  <data name="BUTTON_CANCEL" xml:space="preserve">
    <value>Cancel</value>
    <comment>Generic button</comment>
  </data>
  <data name="BUTTON_CREATE" xml:space="preserve">
    <value>Create</value>
    <comment>Generic button</comment>
  </data>
  <data name="BUTTON_DELETE" xml:space="preserve">
    <value>Delete</value>
    <comment>Generic button</comment>
  </data>
  <data name="BUTTON_DETAILS" xml:space="preserve">
    <value>Details</value>
    <comment>Generic button</comment>
  </data>
  <data name="BUTTON_EDIT" xml:space="preserve">
    <value>Edit</value>
    <comment>Generic button</comment>
  </data>
  <data name="BUTTON_SAVE" xml:space="preserve">
    <value>Save</value>
    <comment>Generic button</comment>
  </data>
  <data name="CREATE" xml:space="preserve">
    <value>Create</value>
    <comment>Generic action</comment>
  </data>
  <data name="DELETE" xml:space="preserve">
    <value>Delete</value>
    <comment>Generic action</comment>
  </data>
  <data name="EDIT" xml:space="preserve">
    <value>Edit</value>
    <comment>Generic action</comment>
  </data>
  <data name="ENTITY_ACCOUNT_CATALOG_NAME" xml:space="preserve">
    <value>Accounts</value>
    <comment>Account catalog</comment>
  </data>
  <data name="ENTITY_ACCOUNT_HELP" xml:space="preserve">
    <value>&lt;p&gt;These are the base accounting categories used throughout the application. They serve as the foundation upon the rest of the data is built, so it’s important to keep this information accurate and up to date.&lt;/p&gt; &lt;p&gt;As always, it is important to keep in mind that modifying a main database catalog item will affect all the items related to it.&lt;/p&gt;</value>
    <comment>Account catalog</comment>
  </data>
  <data name="ENTITY_ACCOUNT_NAME" xml:space="preserve">
    <value>Account</value>
    <comment>Account catalog</comment>
  </data>
  <data name="ENTITY_ACTIVITY_BUDGET_CATALOG_NAME" xml:space="preserve">
    <value>Activity budgets</value>
    <comment>ActivityBudget entity</comment>
  </data>
  <data name="ENTITY_ACTIVITY_BUDGET_HELP" xml:space="preserve">
    <value>&lt;p&gt;A certain amount of budget for the given &lt;b&gt;Activity&lt;/b&gt; and &lt;b&gt;Account&lt;/b&gt;.&lt;/p&gt;</value>
    <comment>ActivityBudget entity</comment>
  </data>
  <data name="ENTITY_ACTIVITY_BUDGET_NAME" xml:space="preserve">
    <value>Activity budget</value>
    <comment>ActivityBudget entity</comment>
  </data>
  <data name="ENTITY_ACTIVITY_CATALOG_NAME" xml:space="preserve">
    <value>Activities</value>
    <comment>Activity entity</comment>
  </data>
  <data name="ENTITY_ACTIVITY_HELP" xml:space="preserve">
    <value>&lt;p&gt;The activities of the Project, under a Result.&lt;/p&gt;</value>
    <comment>Activity entity</comment>
  </data>
  <data name="ENTITY_ACTIVITY_NAME" xml:space="preserve">
    <value>Activity</value>
    <comment>Activity entity</comment>
  </data>
  <data name="ENTITY_DEPOSIT_CATALOG_NAME" xml:space="preserve">
    <value>Deposits</value>
    <comment>Deposits catalog</comment>
  </data>
  <data name="ENTITY_DEPOSIT_HELP" xml:space="preserve">
    <value>&lt;p&gt;Tracking of bank deposits for each &lt;b&gt;Project&lt;/b&gt;.&lt;/p&gt;</value>
    <comment>Deposits catalog</comment>
  </data>
  <data name="ENTITY_DEPOSIT_NAME" xml:space="preserve">
    <value>Deposit</value>
    <comment>Deposits catalog</comment>
  </data>
  <data name="ENTITY_DONOR_CATALOG_NAME" xml:space="preserve">
    <value>Donors</value>
    <comment>Donor catalog</comment>
  </data>
  <data name="ENTITY_DONOR_HELP" xml:space="preserve">
    <value>&lt;p&gt;Entity or organization that provide the main funding for a &lt;b&gt;Project&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;As always, it is important to keep in mind that modifying a main database catalog item will affect all the items related to it.&lt;/p&gt;</value>
    <comment>Donor catalog</comment>
  </data>
  <data name="ENTITY_DONOR_NAME" xml:space="preserve">
    <value>Donor</value>
    <comment>Donor catalog</comment>
  </data>
  <data name="ENTITY_EQUIVALENT_ACCOUNT_CATALOG_NAME" xml:space="preserve">
    <value>Equivalent accounts</value>
    <comment>Equivalent account catalog</comment>
  </data>
  <data name="ENTITY_EQUIVALENT_ACCOUNT_HELP" xml:space="preserve">
    <value>&lt;p&gt;For each &lt;b&gt;Donor&lt;/b&gt;, you may select the alias or alternative name that an &lt;b&gt;Account&lt;/b&gt; will have for &lt;b&gt;Projects&lt;/b&gt; under that Donor.&lt;/p&gt;</value>
    <comment>Equivalent account catalog</comment>
  </data>
  <data name="ENTITY_EQUIVALENT_ACCOUNT_NAME" xml:space="preserve">
    <value>Equivalent account</value>
    <comment>Equivalent account catalog</comment>
  </data>
  <data name="ENTITY_NOTIFICATION_CATALOG_NAME" xml:space="preserve">
    <value>Email notifications</value>
    <comment>Email notification catalog</comment>
  </data>
  <data name="ENTITY_NOTIFICATION_HELP" xml:space="preserve">
    <value>&lt;p&gt;Set the address for email notifications for each user.&lt;/p&gt;</value>
    <comment>Email notification catalog</comment>
  </data>
  <data name="ENTITY_NOTIFICATION_NAME" xml:space="preserve">
    <value>Email notification</value>
    <comment>Email notification catalog</comment>
  </data>
  <data name="ENTITY_ORGANIZATION_CATALOG_NAME" xml:space="preserve">
    <value>Organizations</value>
    <comment>Organization catalog</comment>
  </data>
  <data name="ENTITY_ORGANIZATION_HELP" xml:space="preserve">
    <value>&lt;p&gt;Organization business units. These are used in conjunction with the &lt;b&gt;Accounts&lt;/b&gt; catalog to create the specific accounts that can be used to track the budget.&lt;/p&gt; &lt;p&gt;As always, it is important to keep in mind that modifying a main database catalog item will affect all the items related to it.&lt;/p&gt;</value>
    <comment>Organization catalog</comment>
  </data>
  <data name="ENTITY_ORGANIZATION_NAME" xml:space="preserve">
    <value>Organization</value>
    <comment>Organization catalog</comment>
  </data>
  <data name="ENTITY_PROJECT_CATALOG_NAME" xml:space="preserve">
    <value>Projects</value>
    <comment>Project catalog</comment>
  </data>
  <data name="ENTITY_PROJECT_HELP" xml:space="preserve">
    <value>&lt;p&gt;Main grouping of work for the database. Budgets and expenses are created at the Project level. Projects may contain start and end dates, cash flow management, among other features. Top level of the Project, Result, Activity hierarchy.&lt;/p&gt;</value>
    <comment>Project catalog</comment>
  </data>
  <data name="ENTITY_PROJECT_NAME" xml:space="preserve">
    <value>Project</value>
    <comment>Project catalog</comment>
  </data>
  <data name="ENTITY_RESULT_CATALOG_NAME" xml:space="preserve">
    <value>Results</value>
    <comment>Result entity</comment>
  </data>
  <data name="ENTITY_RESULT_HELP" xml:space="preserve">
    <value>&lt;p&gt;Main goals of the project.&lt;/p&gt;</value>
    <comment>Result entity</comment>
  </data>
  <data name="ENTITY_RESULT_NAME" xml:space="preserve">
    <value>Result</value>
    <comment>Result entity</comment>
  </data>
  <data name="ENTITY_ROLE_CATALOG_NAME" xml:space="preserve">
    <value>Roles</value>
    <comment>Role catalog</comment>
  </data>
  <data name="ENTITY_ROLE_HELP" xml:space="preserve">
    <value>&lt;p&gt;Application roles for granting user privileges.&lt;/p&gt;</value>
    <comment>Role catalog</comment>
  </data>
  <data name="ENTITY_ROLE_NAME" xml:space="preserve">
    <value>Role</value>
    <comment>Role catalog</comment>
  </data>
  <data name="ENTITY_VEHICLE_CATALOG_NAME" xml:space="preserve">
    <value>Vehicles</value>
    <comment>Vehicle catalog</comment>
  </data>
  <data name="ENTITY_VEHICLE_HELP" xml:space="preserve">
    <value>&lt;p&gt;This relates to the available vehicles when creating Trip requests.&lt;/p&gt;</value>
    <comment>Vehicle catalog</comment>
  </data>
  <data name="ENTITY_VEHICLE_NAME" xml:space="preserve">
    <value>Vehicle</value>
    <comment>Vehicle catalog</comment>
  </data>
  <data name="LIST_OF" xml:space="preserve">
    <value>List of</value>
    <comment>Used in Index layout</comment>
  </data>
</root>